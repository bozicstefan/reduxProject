{"ast":null,"code":"// import redux, { createStore } from \"redux\";\n\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// Creating reducer for handling different actions\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\n\n// !!!Each reducer action type MUST overwrite the state instead of mutating it!!!\n// const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"increment\":\n//       return {\n//         counter: state.counter + 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"decrement\":\n//       return {\n//         counter: state.counter - 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"increase\":\n//       return {\n//         counter: state.counter + action.amount,\n//         showCounter: state.showCounter,\n//       };\n//     case \"toggle\":\n//       return { showCounter: !state.showCounter, counter: state.counter };\n//     default:\n//       return state;\n//   }\n// };\n\n// Creating store and adding reducer to it\n// const store = createStore(counterReducer);\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","initialAuthState","isAuthenticated","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authSlice","login","logout","store","reducer","counterActions","actions"],"sources":["/home/stf/Desktop/React vezba/Max/reduxProject/src/store/index.js"],"sourcesContent":["// import redux, { createStore } from \"redux\";\n\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// Creating reducer for handling different actions\n\nconst initialCounterState = { counter: 0, showCounter: true, };\nconst initialAuthState = { isAuthenticated: false };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\n\n\nconst store = configureStore({\n  reducer:   counterSlice.reducer ,\n});\n\n// !!!Each reducer action type MUST overwrite the state instead of mutating it!!!\n// const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"increment\":\n//       return {\n//         counter: state.counter + 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"decrement\":\n//       return {\n//         counter: state.counter - 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"increase\":\n//       return {\n//         counter: state.counter + action.amount,\n//         showCounter: state.showCounter,\n//       };\n//     case \"toggle\":\n//       return { showCounter: !state.showCounter, counter: state.counter };\n//     default:\n//       return state;\n//   }\n// };\n\n// Creating store and adding reducer to it\n// const store = createStore(counterReducer);\nexport const counterActions = counterSlice.actions;\nexport default store;\n"],"mappings":"AAAA;;AAEA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;;AAEA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC;AAC9D,MAAMC,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAM,CAAC;AAEnD,MAAMC,YAAY,GAAGP,WAAW,CAAC;EAC/BQ,IAAI,EAAE,SAAS;EACfN,mBAAmB;EACnBO,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACR,OAAO,EAAE;IACjB,CAAC;IACDS,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACR,OAAO,EAAE;IACjB,CAAC;IACDU,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACR,OAAO,GAAGQ,KAAK,CAACR,OAAO,GAAGW,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACP,WAAW,GAAG,CAACO,KAAK,CAACP,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMa,SAAS,GAAGjB,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZH,gBAAgB;EAChBI,QAAQ,EAAE;IACRS,KAAKA,CAACP,KAAK,EAAE;MACXA,KAAK,CAACL,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDa,MAAMA,CAACR,KAAK,EAAE;MACZA,KAAK,CAACL,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;AAIF,MAAMc,KAAK,GAAGnB,cAAc,CAAC;EAC3BoB,OAAO,EAAId,YAAY,CAACc;AAC1B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGf,YAAY,CAACgB,OAAO;AAClD,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}