{"ast":null,"code":"import redux, { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Creating reducer for handling different actions\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// !!!Each reducer action type MUST overwrite the state instead of mutating it!!!\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter\n      };\n    case \"toggle\":\n      return {\n        showCounter: !state.showCounter,\n        counter: state.counter\n      };\n    default:\n      return state;\n  }\n};\n\n// Creating store and adding reducer to it\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["redux","createStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store"],"sources":["/home/stf/Desktop/React vezba/Max/reduxProject/src/store/index.js"],"sourcesContent":["import redux, { createStore } from \"redux\";\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Creating reducer for handling different actions\n\nconst initialState = { counter: 0, showCounter: true };\n\nconst counterSlice=createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// !!!Each reducer action type MUST overwrite the state instead of mutating it!!!\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter,\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter,\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter,\n      };\n    case \"toggle\":\n      return { showCounter: !state.showCounter, counter: state.counter };\n    default:\n      return state;\n  }\n};\n\n// Creating store and adding reducer to it\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAE1C,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtD,MAAMC,YAAY,GAACJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IAC/C,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,MAAMW,cAAc,GAAGA,CAACN,KAAK,GAAGP,YAAY,EAAEU,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACI,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QACLb,OAAO,EAAEM,KAAK,CAACN,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEK,KAAK,CAACL;MACrB,CAAC;IACH,KAAK,WAAW;MACd,OAAO;QACLD,OAAO,EAAEM,KAAK,CAACN,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEK,KAAK,CAACL;MACrB,CAAC;IACH,KAAK,UAAU;MACb,OAAO;QACLD,OAAO,EAAEM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;QACtCT,WAAW,EAAEK,KAAK,CAACL;MACrB,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QAAEA,WAAW,EAAE,CAACK,KAAK,CAACL,WAAW;QAAED,OAAO,EAAEM,KAAK,CAACN;MAAQ,CAAC;IACpE;MACE,OAAOM,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMQ,KAAK,GAAGjB,WAAW,CAACe,cAAc,CAAC;AAEzC,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}