{"ast":null,"code":"import redux, { createStore } from \"redux\";\n\n// Creating reducer for handling different actions\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// Each reducer action type MUST overwrite the state instead of mutating it\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter\n      };\n    case \"toggle\":\n      return {\n        showCounter: !state.showCounter,\n        counter: state.counter\n      };\n    default:\n      return state;\n  }\n};\n\n// Creating store and adding reducer to it\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["redux","createStore","initialState","counter","showCounter","counterReducer","state","action","type","amount","store"],"sources":["/home/stf/Desktop/React vezba/Max/reduxProject/src/store/index.js"],"sourcesContent":["import redux, { createStore } from \"redux\";\n\n// Creating reducer for handling different actions\n\nconst initialState = { counter: 0, showCounter: true };\n\n// Each reducer action type MUST overwrite the state instead of mutating it\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter,\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter,\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter,\n      };\n    case \"toggle\":\n      return { showCounter: !state.showCounter, counter: state.counter };\n    default:\n      return state;\n  }\n};\n\n// Creating store and adding reducer to it\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;;AAE1C;;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QACLL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEE,KAAK,CAACF;MACrB,CAAC;IACH,KAAK,WAAW;MACd,OAAO;QACLD,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEE,KAAK,CAACF;MACrB,CAAC;IACH,KAAK,UAAU;MACb,OAAO;QACLD,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAGI,MAAM,CAACE,MAAM;QACtCL,WAAW,EAAEE,KAAK,CAACF;MACrB,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QAAEA,WAAW,EAAE,CAACE,KAAK,CAACF,WAAW;QAAED,OAAO,EAAEG,KAAK,CAACH;MAAQ,CAAC;IACpE;MACE,OAAOG,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMI,KAAK,GAAGT,WAAW,CAACI,cAAc,CAAC;AAEzC,eAAeK,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}