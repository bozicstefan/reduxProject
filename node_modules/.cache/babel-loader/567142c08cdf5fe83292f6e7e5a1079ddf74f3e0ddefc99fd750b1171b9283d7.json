{"ast":null,"code":"import redux, { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Creating reducer for handling different actions\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggle(state) {}\n  }\n});\n\n// !!!Each reducer action type MUST overwrite the state instead of mutating it!!!\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter\n      };\n    case \"toggle\":\n      return {\n        showCounter: !state.showCounter,\n        counter: state.counter\n      };\n    default:\n      return state;\n  }\n};\n\n// Creating store and adding reducer to it\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["redux","createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","amount","toggle","counterReducer","type","store"],"sources":["/home/stf/Desktop/React vezba/Max/reduxProject/src/store/index.js"],"sourcesContent":["import redux, { createStore } from \"redux\";\n\nimport {createSlice} from \"@reduxjs/toolkit\";\n\n// Creating reducer for handling different actions\n\nconst initialState = { counter: 0, showCounter: true };\n\ncreateSlice({\nname: \"counter\",\ninitialState,\nreducers:{\n  increment(state) {\n    state.counter++;\n  },\n  decrement(state) {\n    state.counter--;\n  },\n  increase(state,action) {\nstate.counter=state.counter+action.amount\n  },\n  toggle(state) {},\n}  \n})\n\n\n// !!!Each reducer action type MUST overwrite the state instead of mutating it!!!\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter,\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter,\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter,\n      };\n    case \"toggle\":\n      return { showCounter: !state.showCounter, counter: state.counter };\n    default:\n      return state;\n  }\n};\n\n// Creating store and adding reducer to it\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAE1C,SAAQC,WAAW,QAAO,kBAAkB;;AAE5C;;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtDH,WAAW,CAAC;EACZI,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAC;IACPC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACL,OAAO,EAAE;IACjB,CAAC;IACDM,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACL,OAAO,EAAE;IACjB,CAAC;IACDO,QAAQA,CAACF,KAAK,EAACG,MAAM,EAAE;MACzBH,KAAK,CAACL,OAAO,GAACK,KAAK,CAACL,OAAO,GAACQ,MAAM,CAACC,MAAM;IACvC,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAE,CAAC;EACjB;AACA,CAAC,CAAC;;AAGF;AACA,MAAMM,cAAc,GAAGA,CAACN,KAAK,GAAGN,YAAY,EAAES,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACI,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QACLZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEI,KAAK,CAACJ;MACrB,CAAC;IACH,KAAK,WAAW;MACd,OAAO;QACLD,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEI,KAAK,CAACJ;MACrB,CAAC;IACH,KAAK,UAAU;MACb,OAAO;QACLD,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAGQ,MAAM,CAACC,MAAM;QACtCR,WAAW,EAAEI,KAAK,CAACJ;MACrB,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QAAEA,WAAW,EAAE,CAACI,KAAK,CAACJ,WAAW;QAAED,OAAO,EAAEK,KAAK,CAACL;MAAQ,CAAC;IACpE;MACE,OAAOK,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMQ,KAAK,GAAGhB,WAAW,CAACc,cAAc,CAAC;AAEzC,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}